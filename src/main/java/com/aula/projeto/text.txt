### *Question√°rio Dissertativo sobre a Estrutura de um Projeto API em Java com Spring Boot*

#### *1. Qual √© a fun√ß√£o do JDK em um projeto Java?*
O JDK (Java Development Kit) √© um conjunto de ferramentas essenciais para o desenvolvimento de aplica√ß√µes Java. Ele inclui o compilador javac, que converte c√≥digo-fonte Java em bytecode, al√©m da JVM (Java Virtual Machine), respons√°vel por executar esse bytecode. Tamb√©m cont√©m bibliotecas padr√£o e utilit√°rios como o java (para rodar aplica√ß√µes) e javadoc (para gerar documenta√ß√£o do c√≥digo). Sem o JDK, um desenvolvedor n√£o conseguiria compilar nem rodar seus programas Java.

#### *2. Quais s√£o as vantagens de utilizar o Spring Boot no desenvolvimento de aplica√ß√µes Java?*
O Spring Boot simplifica o desenvolvimento de aplica√ß√µes Java ao fornecer configura√ß√µes autom√°ticas e um ambiente padronizado. Algumas vantagens incluem:
- *Configura√ß√£o m√≠nima*: Ele elimina a necessidade de configura√ß√µes XML complexas.
- *Servidor embutido*: Permite rodar a aplica√ß√£o sem precisar configurar um servidor externo, como Tomcat.
- *Gerenciamento de depend√™ncias*: Usa o Maven ou Gradle para facilitar a inclus√£o de bibliotecas.
- *Facilidade na cria√ß√£o de APIs REST*: O Spring Boot j√° inclui suporte para RESTful APIs.
- *Seguran√ßa e escalabilidade*: √â amplamente utilizado para desenvolver microsservi√ßos e aplica√ß√µes de grande porte.

#### *3. Como o IntelliJ IDEA pode auxiliar no desenvolvimento de projetos Spring Boot?*
O IntelliJ IDEA √© uma IDE avan√ßada que oferece suporte a diversas linguagens e frameworks, incluindo Spring Boot. Ele auxilia no desenvolvimento de projetos de v√°rias formas:
- *Autocompletar inteligente*: Sugere c√≥digo enquanto o desenvolvedor digita, reduzindo erros.
- *Depura√ß√£o avan√ßada*: Permite rastrear a execu√ß√£o do c√≥digo passo a passo.
- *Integra√ß√£o com Git*: Facilita o versionamento e colabora√ß√£o em projetos.
- *Suporte ao Maven*: Automatiza a importa√ß√£o e gerenciamento de depend√™ncias.
- *Ferramentas de teste*: Permite executar testes diretamente na IDE.

#### *4. O que √© um CRUD e quais opera√ß√µes ele engloba?*
CRUD √© um acr√¥nimo para *Create, Read, Update e Delete*, que s√£o as quatro opera√ß√µes fundamentais em qualquer sistema de banco de dados:
- *Create (Criar)*: Insere novos registros no banco de dados.
- *Read (Ler)*: Recupera informa√ß√µes j√° armazenadas.
- *Update (Atualizar)*: Modifica registros existentes.
- *Delete (Excluir)*: Remove registros do banco de dados.

O CRUD √© a base de praticamente todas as aplica√ß√µes de software que interagem com bancos de dados.

#### *5. Qual √© a finalidade do arquivo pom.xml em um projeto Maven?*
O arquivo pom.xml (Project Object Model) √© a configura√ß√£o principal de um projeto Maven. Ele tem as seguintes fun√ß√µes:
- *Gerenciar depend√™ncias*: Lista todas as bibliotecas que o projeto utiliza.
- *Definir a estrutura do projeto*: Especifica diret√≥rios, plugins e configura√ß√µes de build.
- *Automatizar tarefas*: Como compila√ß√£o, testes e empacotamento.
- *Controle de vers√£o*: Especifica quais vers√µes de bibliotecas devem ser usadas, garantindo compatibilidade.

#### *6. Como √© organizada a estrutura de diret√≥rios em um projeto Spring Boot?*
A estrutura t√≠pica de um projeto Spring Boot segue o seguinte padr√£o:
- src/main/java ‚Äì Cont√©m o c√≥digo-fonte principal.
- src/main/resources ‚Äì Armazena configura√ß√µes, templates e arquivos est√°ticos.
- src/test/java ‚Äì Cont√©m os testes automatizados.
- pom.xml ‚Äì Gerencia as depend√™ncias do Maven.
- application.properties ou application.yml ‚Äì Configura√ß√µes da aplica√ß√£o.

Esse padr√£o facilita a organiza√ß√£o e manuten√ß√£o do c√≥digo.

#### *7. Quais s√£o os benef√≠cios de seguir uma estrutura padr√£o em projetos Java?*
Seguir uma estrutura padr√£o traz v√°rias vantagens:
- *Facilidade de manuten√ß√£o*: Outros desenvolvedores conseguem entender o projeto rapidamente.
- *Reutiliza√ß√£o de c√≥digo*: Separa√ß√£o clara entre camadas facilita a reutiliza√ß√£o.
- *Maior organiza√ß√£o*: Cada arquivo tem um local espec√≠fico, evitando bagun√ßa no reposit√≥rio.
- *Compatibilidade com frameworks*: Muitas ferramentas Java, como Spring Boot, assumem essa estrutura como padr√£o, reduzindo a necessidade de configura√ß√µes manuais.

#### *8. Como o Spring Boot facilita a configura√ß√£o e o gerenciamento de depend√™ncias em uma aplica√ß√£o?*
O Spring Boot usa o conceito de "starters", que s√£o pacotes pr√©-configurados contendo todas as depend√™ncias necess√°rias para um determinado tipo de aplica√ß√£o. Por exemplo:
- spring-boot-starter-web ‚Äì Para criar APIs REST.
- spring-boot-starter-data-jpa ‚Äì Para interagir com bancos de dados.
- spring-boot-starter-test ‚Äì Para testes automatizados.

Al√©m disso, o Spring Boot permite configurar a aplica√ß√£o atrav√©s de arquivos YAML ou .properties, eliminando a necessidade de configurar manualmente cada componente.

#### *9. Explique o papel dos arquivos dentro do diret√≥rio src/main/resources em um projeto Spring Boot.*
O diret√≥rio src/main/resources armazena recursos necess√°rios para a aplica√ß√£o. Ele pode conter:
- *application.properties ou application.yml* ‚Äì Arquivo de configura√ß√£o da aplica√ß√£o.
- *Templates* ‚Äì Usados em aplica√ß√µes web com Thymeleaf ou FreeMarker.
- *Arquivos est√°ticos* ‚Äì Como imagens, CSS e JavaScript.
- *Mensagens de internacionaliza√ß√£o* ‚Äì Arquivos .properties para suporte a m√∫ltiplos idiomas.

Esse diret√≥rio √© essencial para garantir que a aplica√ß√£o tenha as configura√ß√µes e recursos corretos para funcionar.

#### *10. Quais s√£o as responsabilidades dos autores em um projeto colaborativo como este?*
Em um projeto colaborativo, os autores possuem diversas responsabilidades, incluindo:
- *Desenvolvimento do c√≥digo*: Implementar funcionalidades seguindo boas pr√°ticas.
- *Documenta√ß√£o*: Escrever README, coment√°rios no c√≥digo e explica√ß√µes sobre as funcionalidades.
- *Versionamento*: Usar ferramentas como Git para registrar mudan√ßas e facilitar o trabalho em equipe.
- *Testes*: Garantir que o c√≥digo funcione corretamente antes de envi√°-lo para o reposit√≥rio.
- *Colabora√ß√£o*: Revisar c√≥digo de outros membros e dar feedbacks construtivos.

Projetos colaborativos exigem comunica√ß√£o clara e divis√£o de tarefas para garantir um trabalho eficiente e organizado.




## *üîπ Java e JDK*

### *1. O que √© a JVM (Java Virtual Machine) e como ela funciona?*
A *JVM (Java Virtual Machine)* √© um componente essencial da plataforma Java que executa programas compilados em *bytecode*. Ela √© respons√°vel por:
- Converter bytecode em instru√ß√µes de m√°quina espec√≠ficas para cada sistema operacional.
- Gerenciar mem√≥ria e execu√ß√£o de processos.
- Fornecer funcionalidades como coleta de lixo (*Garbage Collection*).
- Garantir seguran√ßa e isolamento do c√≥digo.

A JVM permite que Java seja *port√°vel*, ou seja, um programa Java compilado pode rodar em qualquer sistema com uma JVM instalada.

---

### *2. Qual a diferen√ßa entre JDK, JRE e JVM?*
- *JDK (Java Development Kit)* ‚Üí Conjunto completo que inclui a JRE, a JVM e ferramentas de desenvolvimento, como o compilador (javac). √â necess√°rio para programar em Java.
- *JRE (Java Runtime Environment)* ‚Üí Cont√©m a JVM e bibliotecas b√°sicas para rodar programas Java, mas n√£o inclui ferramentas de desenvolvimento.
- *JVM (Java Virtual Machine)* ‚Üí Executa bytecode Java e faz a ponte entre o c√≥digo e o hardware do computador.

---

### *3. O que s√£o os "garbage collectors" em Java e qual sua import√¢ncia?*
O *Garbage Collector (GC)* √© um mecanismo autom√°tico da JVM que gerencia a mem√≥ria, removendo objetos que n√£o s√£o mais utilizados para liberar espa√ßo. Isso evita *memory leaks (vazamentos de mem√≥ria)* e melhora a efici√™ncia do programa.

Principais tipos de Garbage Collectors no Java:
- *Serial GC* ‚Üí Indicado para aplica√ß√µes pequenas e de baixa concorr√™ncia.
- *Parallel GC* ‚Üí Usa m√∫ltiplas threads para coletar lixo mais rapidamente.
- *G1 GC (Garbage First)* ‚Üí Equilibra desempenho e consumo de mem√≥ria.
- *ZGC & Shenandoah GC* ‚Üí Focados em baixa lat√™ncia para aplica√ß√µes modernas.

---

### *4. Explique os conceitos de heap e stack na mem√≥ria do Java.*
- *Heap*: √Årea de mem√≥ria onde os objetos s√£o armazenados dinamicamente. √â gerenciada pelo Garbage Collector.
- *Stack*: √Årea usada para armazenar vari√°veis locais e chamadas de m√©todo. Cada thread tem sua pr√≥pria stack, e os dados s√£o automaticamente removidos quando um m√©todo termina.

---

### *5. O que s√£o interfaces e classes abstratas? Qual a diferen√ßa entre elas?*
- *Interfaces* ‚Üí S√£o contratos que definem um conjunto de m√©todos sem implementa√ß√£o. Classes podem *implementar* v√°rias interfaces.
- *Classes abstratas* ‚Üí Podem conter m√©todos concretos e abstratos. S√£o usadas quando v√°rias classes compartilham um comportamento base, mas precisam de implementa√ß√£o espec√≠fica em alguns m√©todos.

Diferen√ßa principal:
- Uma classe pode *implementar m√∫ltiplas interfaces, mas **herdar apenas uma classe abstrata*.

---

### *6. O que significa dizer que Java √© uma linguagem "orientada a objetos"?*
Significa que Java organiza o c√≥digo em *objetos*, que encapsulam atributos (dados) e m√©todos (funcionalidades). Os quatro pilares da programa√ß√£o orientada a objetos s√£o:
- *Encapsulamento* ‚Üí Protege os dados do objeto.
- *Heran√ßa* ‚Üí Reutiliza c√≥digo de outras classes.
- *Polimorfismo* ‚Üí Permite que objetos de diferentes classes sejam tratados de forma gen√©rica.
- *Abstra√ß√£o* ‚Üí Esconde detalhes internos da implementa√ß√£o.

---

## *üîπ Spring Boot - Fundamentos*

### *11. O que √© a invers√£o de controle (IoC) e como o Spring Boot a implementa?*
*IoC (Inversion of Control)* √© um princ√≠pio onde o controle da cria√ß√£o e gerenciamento de objetos √© delegado ao framework (Spring Boot).
No Spring Boot, isso √© feito via *inje√ß√£o de depend√™ncias* e *containers de beans*, evitando a necessidade de instanciar manualmente objetos.

---

### *12. O que √© inje√ß√£o de depend√™ncia e por que ela √© usada?*
A *Inje√ß√£o de Depend√™ncia (DI)* √© um padr√£o onde um objeto recebe suas depend√™ncias de uma fonte externa, ao inv√©s de cri√°-las diretamente.

*Benef√≠cios:*
- *Reduz acoplamento* entre classes.
- *Facilita testes*, pois √© poss√≠vel substituir depend√™ncias por mocks.
- *Melhora a manuten√ß√£o* do c√≥digo.

No Spring Boot, a DI √© gerenciada por anota√ß√µes como @Autowired e @Component.

---

### *13. Qual √© a fun√ß√£o da anota√ß√£o @RestController no Spring Boot?*
A anota√ß√£o @RestController indica que a classe √© um controlador REST. Combina @Controller e @ResponseBody, tornando os m√©todos automaticamente manipuladores de requisi√ß√µes HTTP.

---

### *14. Qual a diferen√ßa entre @Component, @Service e @Repository?*
Todas s√£o especializa√ß√µes de @Component, mas t√™m prop√≥sitos diferentes:
- *@Component* ‚Üí Define um Bean gen√©rico do Spring.
- *@Service* ‚Üí Indica uma classe de servi√ßo (l√≥gica de neg√≥cio).
- *@Repository* ‚Üí Indica uma classe que interage com o banco de dados.

---

## *üîπ Desenvolvimento de APIs com Spring Boot*

### *21. O que √© uma API REST e quais s√£o seus princ√≠pios?*
Uma *API REST (Representational State Transfer)* segue princ√≠pios como:
- *Stateless* ‚Üí Cada requisi√ß√£o deve conter todas as informa√ß√µes necess√°rias.
- *Cache√°vel* ‚Üí Respostas podem ser armazenadas para otimizar desempenho.
- *Cliente-Servidor* ‚Üí Separa responsabilidades entre frontend e backend.
- *Uniformidade* ‚Üí Uso de URLs padronizadas e m√©todos HTTP (GET, POST, etc.).

---

### *25. Como funcionam os par√¢metros de requisi√ß√£o (@PathVariable e @RequestParam)?*
- @PathVariable ‚Üí Captura partes da URL. Exemplo:
  java
  @GetMapping("/users/{id}")
  public User getUser(@PathVariable Long id) { ... }

- @RequestParam ‚Üí Captura par√¢metros de query. Exemplo:
  java
  @GetMapping("/users")
  public List<User> getUsers(@RequestParam String name) { ... }


---

## *üîπ Spring Data JPA e Bancos de Dados*

### *31. O que √© o Spring Data JPA e como ele simplifica o acesso ao banco de dados?*
√â um m√≥dulo do Spring que simplifica a integra√ß√£o com o JPA, reduzindo a necessidade de escrever SQL manualmente.

*Vantagens:*
- Usa m√©todos autom√°ticos como findById(), save(), delete().
- Suporta anota√ß√µes para definir mapeamentos (@Entity, @Table, etc.).

---

### *37. O que √© o conceito de "lazy loading" e "eager loading" no Hibernate?*
- *Lazy Loading (Carregamento Tardio)* ‚Üí Os dados s√≥ s√£o carregados quando acessados.
- *Eager Loading (Carregamento Antecipado)* ‚Üí Os dados s√£o carregados junto com a consulta inicial.

---

## *üîπ Testes Automatizados*

### *61. Qual a import√¢ncia dos testes automatizados no desenvolvimento de software?*
Os testes garantem que o c√≥digo funciona conforme esperado, reduzindo falhas e facilitando refatora√ß√µes.

Principais tipos:
- *Testes Unit√°rios* ‚Üí Validam m√©todos individuais.
- *Testes de Integra√ß√£o* ‚Üí Testam a intera√ß√£o entre componentes.
- *Testes Funcionais* ‚Üí Avaliam o comportamento da aplica√ß√£o.

